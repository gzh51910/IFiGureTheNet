{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\\\u6211\\u56FE\\u7F51\\\\osa\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Route } from \"react-router-dom\";\nimport Home from './pages/Home';\nimport './App.css';\nimport { Form, Icon, Input, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css'; // import Home from \"./pages/Home\";\n// class App extends React.Component{\n//   constructor(props){\n//     super(props);\n//     this.state={\n//       menu:[\n//         {\n//           name:\"home\",\n//           path:'/home',\n//           text:'首页'\n//         }\n//       ]\n//     }\n//     this.login = this.login.bind(this);\n//   }\n//   login(){\n//     console.log(666);\n//   }\n//   render(){\n//     const { getFieldDecorator } = this.props.form;\n//     return (\n//       <div className=\"app-box\">\n//         <h1 className=\"app-h1\">后台管理系统</h1>\n//         <div className=\"app-form\">\n//         <Form onSubmit={this.handleSubmit} className=\"login-form\">\n//         <Form.Item>\n//           {getFieldDecorator('username', {\n//             rules: [{ required: true, message: 'Please input your username!' }],\n//           })(\n//             <Input onChange={this.login}\n//               prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//               placeholder=\"用户名\"\n//             />,\n//           )}\n//         </Form.Item>\n//         <Form.Item hasFeedback>\n//           {getFieldDecorator('password', {\n//             rules: [{ required: true, message: 'Please input your Password!' }],\n//           })(\n//             <Input\n//               prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//               type=\"password\"\n//               placeholder=\"密码\"\n//             />,\n//           )}\n//         </Form.Item>\n//         <Form.Item>\n//           {getFieldDecorator('remember', {\n//             valuePropName: 'checked',\n//             initialValue: true,\n//           })(<Checkbox>记住密码</Checkbox>)}\n//           <a className=\"login-form-forgot\" href=\"\">\n//             忘记密码\n//           </a>\n//           <Button onClick={this.login} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n//             登录\n//           </Button>\n//         </Form.Item>\n//       </Form>\n//       </div>\n//         <Route path=\"/home\" Component={Home}/>\n//       </div>\n//     )\n//   }\n// }\n\nimport { Row, Col, Tooltip, Cascader, Select, AutoComplete } from 'antd';\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst App = Form.create({\n  name: 'register'\n})(RegistrationForm); //  App = Form.create({ name: 'normal_login' })(App);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/我图网/osa/src/App.js"],"names":["React","Route","Home","Form","Icon","Input","Button","Checkbox","Row","Col","Tooltip","Cascader","Select","AutoComplete","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","rules","type","message","required","validator","App","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Route} from \"react-router-dom\";\nimport Home from './pages/Home';\nimport './App.css';\nimport { Form, Icon, Input, Button, Checkbox } from 'antd';\nimport 'antd/dist/antd.css';\n // import Home from \"./pages/Home\";\n\n// class App extends React.Component{\n//   constructor(props){\n//     super(props);\n//     this.state={\n//       menu:[\n//         {\n//           name:\"home\",\n//           path:'/home',\n//           text:'首页'\n//         }\n//       ]\n//     }\n//     this.login = this.login.bind(this);\n//   }\n//   login(){\n    \n//     console.log(666);\n//   }\n//   render(){\n//     const { getFieldDecorator } = this.props.form;\n//     return (\n//       <div className=\"app-box\">\n//         <h1 className=\"app-h1\">后台管理系统</h1>\n//         <div className=\"app-form\">\n//         <Form onSubmit={this.handleSubmit} className=\"login-form\">\n//         <Form.Item>\n//           {getFieldDecorator('username', {\n//             rules: [{ required: true, message: 'Please input your username!' }],\n//           })(\n//             <Input onChange={this.login}\n//               prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//               placeholder=\"用户名\"\n//             />,\n//           )}\n//         </Form.Item>\n//         <Form.Item hasFeedback>\n//           {getFieldDecorator('password', {\n//             rules: [{ required: true, message: 'Please input your Password!' }],\n//           })(\n//             <Input\n//               prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//               type=\"password\"\n//               placeholder=\"密码\"\n//             />,\n//           )}\n//         </Form.Item>\n//         <Form.Item>\n//           {getFieldDecorator('remember', {\n//             valuePropName: 'checked',\n//             initialValue: true,\n//           })(<Checkbox>记住密码</Checkbox>)}\n//           <a className=\"login-form-forgot\" href=\"\">\n//             忘记密码\n//           </a>\n//           <Button onClick={this.login} type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n//             登录\n//           </Button>\n//         </Form.Item>\n//       </Form>\n//       </div>\n\n\n//         <Route path=\"/home\" Component={Home}/>\n//       </div>\n//     )\n//   }\n// }\n\n\n\n\n\nimport {\n  Row,\n  Col,\n  Tooltip,\n  Cascader,\n  Select,\n  AutoComplete,\n} from 'antd';\n\n\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  handleWebsiteChange = value => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({ autoCompleteResult });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n   \n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n  \n   \n    \n\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator('email', {\n            rules: [\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!',\n              },\n              {\n                required: true,\n                message: 'Please input your E-mail!',\n              },\n            ],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n              {\n                validator: this.validateToNextPassword,\n              },\n            ],\n          })(<Input.Password />)}\n        </Form.Item>\n        \n       \n       \n       \n      \n      </Form>\n    );\n  }\n}\n\nconst App = Form.create({ name: 'register' })(RegistrationForm);\n\n\n\n\n\n  //  App = Form.create({ name: 'normal_login' })(App);\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}